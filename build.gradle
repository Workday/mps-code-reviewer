import org.apache.tools.ant.util.TeeOutputStream

// the mps version we build (and install) the plugins for. Necessary to compute a user's plugin directory 
ext.mpsMajor = "2017.3"

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'org.apache.ant', name: 'ant-junit', version: '1.9.7'
  }
}

apply plugin: 'base'

repositories {
  maven {
    mavenCentral()
    url 'https://projects.itemis.de/nexus/content/groups/OS'
  }
}

configurations {
  mps
  mpsPlugins
  compile
  git4mpsCompile
}

dependencies {
  // Plugin dependencies for project
  mpsPlugins group: 'com.mbeddr', name: 'platform', version: '1.0.20107.+'

  // Compile-time dependencies
  // Multiple configurations allow us to easily copy the deps to the required locations
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.10.0'
  mps group: 'com.jetbrains', name: 'mps', version: '2017.3.5'
  git4mpsCompile files('artifacts/MPS/plugins/git4idea/lib/git4idea.jar')
  git4mpsCompile files('artifacts/MPS/plugins/git4idea/lib/git4idea-rt.jar')
}

task unzipMps(type: Copy, description: "Unzips MPS into the artifacts folder.") {
  dependsOn configurations.mps
  from {
    configurations.mps.resolve().collect { zipTree(it) }
  }
  into 'artifacts/MPS'
}

task unzipPlugins(type: Copy, description: "Unzips the IDE plugins into the artifacts folder") {
  dependsOn configurations.mpsPlugins
  from {
    configurations.mpsPlugins.resolve().collect { zipTree(it) }
  }
  into 'artifacts'
}
    
task syncCompileDependenciesToLib(type: Sync) {
  // sync because these should be the only files in this lib directory
  from {
    configurations.compile.resolve()
  }
  into 'solutions/com.workday.mps.review/lib'
}

task copyGit4mpsCompileDependenciesToLib(type: Copy) {
  from {
    configurations.git4mpsCompile.resolve()
  }
  into 'solutions/git4mps/lib'
}
copyGit4mpsCompileDependenciesToLib.mustRunAfter unzipMps

task copyCompileDependenciesToLib(dependsOn: [copyGit4mpsCompileDependenciesToLib,
                                              syncCompileDependenciesToLib])

task setup(group: 'Project',
           description: 'Initializes the project for development',
           dependsOn: [unzipMps,
                       unzipPlugins, 
                       copyCompileDependenciesToLib])

clean.doFirst {
  delete 'artifacts'
  delete 'dist'
  delete 'test'
  // delete all generated code
  ant.delete(includeemptydirs: true) {
    fileset(dir: "${rootDir}", defaultexcludes: false) {
      include(name: '**/lib/**')
      include(name: '**/source_gen/**')
      include(name: '**/source_gen.caches/**')
      include(name: '**/classes_gen/**')
      include(name: '**/classes_gen.caches/**')
      include(name: '**/test_gen/**')
      include(name: '**/test_gen.caches/**')
    }
  }
}

task generateBuildScripts(group: 'MPS Build',
                          description: 'Generates all Ant build scripts',
                          dependsOn: setup) {
  doLast {
  	println 'Generating ant scripts ==========================================='
  	runAnt "${rootDir}/buildScripts/reviewPluginBuildScripts.xml", 'generate'
  	println 'Ant scripts have been successfully generated ====================='
  	println()
  }
}

task buildPluginIncremental(group: 'MPS Build',
                 description: 'Assembles the code reviewer plugin from generated source. Useful when working with MPS',
                 dependsOn: generateBuildScripts) {
  doLast {
    println 'Building code reviewer plugin ===================================='
    runAnt "${rootDir}/dist/git4mpsPlugin.xml", 'build'
    runAnt "${rootDir}/dist/reviewPlugin.xml", 'build'
    println 'Code reviewer plugin has been successfully built ================='
    println()
  }
}

task buildPlugin(group: 'MPS Build',
                 description: 'Generates and assembles the code reviewer plugin',
                 dependsOn: generateBuildScripts) {
  doLast {
    println 'Building code reviewer plugin ===================================='
    runAnt "${rootDir}/dist/git4mpsPlugin.xml", 'clean', 'generate', 'build'
    runAnt "${rootDir}/dist/reviewPlugin.xml", 'clean', 'generate', 'build'
    println 'Code reviewer plugin has been successfully built ================='
    println()
  }
}

task zipGit4mpsPlugin(group: 'MPS Build',
               type: Zip,
               description: 'Archive git4mps plugin into zip file') {
  destinationDir = file("${rootDir}/dist/build/artifacts/")
  archiveName = 'git4mps.zip'
  
  from "${rootDir}/dist/build/artifacts/git4mpsPlugin/git4mps"
}

task zipCodeReviewerPlugin(group: 'MPS Build',
               type: Zip,
               description: 'Archive code reviewer plugin into zip file') {
  destinationDir = file("${rootDir}/dist/build/artifacts/")
  archiveName = 'com.workday.mps.review.zip'
  
  from "${rootDir}/dist/build/artifacts/reviewPlugin/com.workday.mps.review"
}

task zipPlugin(group: 'MPS Build',
               description: 'Archive plugins into zip files',
               dependsOn: [buildPlugin, zipGit4mpsPlugin, zipCodeReviewerPlugin]) {
  doLast {
    println 'Plugins have been successfully zipped ================='
    println()
  }
}


defaultTasks 'build'
assemble.dependsOn buildPlugin
// TODO: run tests as part of check

void runAnt(Object buildfile, String... targets) {
    exec 'BUILD FAILED', ['ant', '-buildfile', buildfile, *targets] as Object[]
}

void exec(String textToFind, Object... args) {
    exec {
        commandLine = args
    }
}

void execAndFailIfTextFound(String textToFind, Object... args) {
  def taskOutput = new ByteArrayOutputStream()
  def teeOutput = new TeeOutputStream(taskOutput, System.out)
  exec {
      ignoreExitValue = true
      commandLine = args
      standardOutput = teeOutput
      errorOutput = teeOutput
  }
  String testOutput = taskOutput.toString()
  if (testOutput.contains(textToFind)) {
      throw new GradleException('ANT build failure')
  }
}


def userHome = System.properties['user.home']
def mpsPluginsDirPattern
if (System.properties['os.name'].toLowerCase().contains('mac')) {
    mpsPluginsDirPattern = "$userHome/Library/Application Support/%s"
} else {
    mpsPluginsDirPattern = "$userHome/.%s/config/plugins"
}

if (project.hasProperty("MPS_PATHS_SELECTOR")) {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, project.getProperty("MPS_PATHS_SELECTOR"))
} else {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, "MPS$mpsMajor")
}

task install_git4mps(type: Copy,
    description: "Install git4mps into the MPS plugin repository",
	dependsOn: build) {
    from zipTree("$rootDir/dist/build/artifacts/reviewPlugin/git4mps.zip")
    into "$mpsPluginsDir"
}

task install_mpsreview(type: Copy,
    description: "Install mps.review into the MPS plugin repository",
	dependsOn: build) {
    from zipTree("$rootDir/dist/build/artifacts/reviewPlugin/com.workday.mps.review.zip")
    into "$mpsPluginsDir"
}

task install(description: "Install the required plugins into the MPS plugin repository by copying them into the user's home dir",
    group: "MPS Build",
	dependsOn: [install_git4mps, install_mpsreview]) {
    doFirst {
        // check parent gradle file for definition of the variables
        println "Installing required mps-code-reviewer plugins to '$mpsPluginsDir'"
        if (!project.hasProperty("MPS_PATHS_SELECTOR")) {
            println "To change 'MPS<VERSION>' part, pass MPS_PATHS_SELECTOR property to gradle with -PMPS_PATHS_SELECTOR=<custom path selector>"
            println "The path selector only contains the the actual selector for instance \"MPS2017.3\" not the full qualified path to the user plugin directory."
        }
    }
}

task uninstall(type: Delete, description: "uninstall the plugins from the MPS plugin repository",
    group: "MPS Build") {
	delete "$mpsPluginsDir"+"/git4mps", "$mpsPluginsDir"+"/com.workday.mps.review"
    doFirst {
        // check parent gradle file for definition of the variables
        println "Uninstalling required mps-code-reviewer plugins from '$mpsPluginsDir'"
        if (!project.hasProperty("MPS_PATHS_SELECTOR")) {
            println "To change 'MPS<VERSION>' part, pass MPS_PATHS_SELECTOR property to gradle with -PMPS_PATHS_SELECTOR=<custom path selector>"
            println "The path selector only contains the the actual selector for instance \"MPS2017.3\" not the full qualified path to the user plugin directory."
        }
    }
}


