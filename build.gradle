// Build script for MpsCodeReview
import org.apache.tools.ant.util.TeeOutputStream

/*
Things to add to an MPS Gradle plugin:

- Library dependencies (i.e. mbeddr is used as a library for this project, have gradle download & configure the MPS project for that)
- MPS ANT script execution (clean, generate, build, test, others?)
- Solution dependency management?
- Project structure? (Solutions, etc)
*/

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'org.apache.ant', name: 'ant-junit', version: '1.9.7'
  }
}

apply plugin: 'base'

repositories {
  maven {
    mavenCentral()
    url 'https://projects.itemis.de/nexus/content/groups/OS'
  }
}

configurations {
  mps
  mpsPlugins
  compile
  git4mpsCompile
}

ext {
  mpsVersion = '2017.3.5'
  mbeddrPlatformVersion = '1.0.20107.+'
  gsonVersion = '2.8.0'
  okhttpVersion = '3.10.0'
}

dependencies {
  // Plugin dependencies for project
  mpsPlugins group: 'com.mbeddr', name: 'platform', version: mbeddrPlatformVersion

  // Compile-time dependencies
  // Multiple configurations allow us to easily copy the deps to the required locations
  compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion
  mps group: 'com.jetbrains', name: 'mps', version: mpsVersion
  git4mpsCompile files('artifacts/MPS/plugins/git4idea/lib/git4idea.jar')
  git4mpsCompile files('artifacts/MPS/plugins/git4idea/lib/git4idea-rt.jar')
}

task unzipMps(type: Copy) {
  dependsOn configurations.mps
  from {
    configurations.mps.resolve().collect { zipTree(it) }
  }
  into 'artifacts/MPS'
}

task unzipPlugins(type: Copy) {
  dependsOn configurations.mpsPlugins
  from {
    configurations.mpsPlugins.resolve().collect { zipTree(it) }
  }
  into 'artifacts'
}
    
task syncCompileDependenciesToLib(type: Sync) {
  // sync because these should be the only files in this lib directory
  from {
    configurations.compile.resolve()
  }
  into 'solutions/com.workday.mps.review/lib'
}

task copyGit4mpsCompileDependenciesToLib(type: Copy) {
  from {
    configurations.git4mpsCompile.resolve()
  }
  into 'solutions/com.workday.mps.review.git4mps/lib'
}
copyGit4mpsCompileDependenciesToLib.mustRunAfter unzipMps

task copyCompileDependenciesToLib(dependsOn: [copyGit4mpsCompileDependenciesToLib,
                                              syncCompileDependenciesToLib])

task setup(group: 'Project',
           description: 'Initializes the project for development',
           dependsOn: [unzipMps,
                       unzipPlugins, 
                       copyCompileDependenciesToLib])

clean.doFirst {
  delete 'artifacts'
  delete 'dist'
  delete 'test'
  // delete all generated code
  ant.delete(includeemptydirs: true) {
    fileset(dir: "${rootDir}", defaultexcludes: false) {
      include(name: '**/lib/**')
      include(name: '**/source_gen/**')
      include(name: '**/source_gen.caches/**')
      include(name: '**/classes_gen/**')
      include(name: '**/classes_gen.caches/**')
      include(name: '**/test_gen/**')
      include(name: '**/test_gen.caches/**')
    }
  }
}

task generateBuildScripts(description: 'Generates all Ant build scripts',
                          group: 'MPS Build',
                          dependsOn: setup) {
  doLast {
  	println 'Generating ant scripts ==========================================='
  	runAnt "${rootDir}/buildScripts/reviewPluginBuildScripts.xml", 'generate'
  	println 'Ant scripts have been successfully generated ====================='
  	println()
  }
}

task buildPlugin(group: 'MPS Build',
                 description: 'Generates the code reviewer plugin',
                 dependsOn: generateBuildScripts) {
  doLast {
    println 'Building code reviewer plugin ===================================='
    runAnt "${rootDir}/dist/reviewPlugin.xml", 'clean', 'generate', 'build'
    println 'Code reviewer plugin has been successfully built ================='
    println()
  }
}
defaultTasks 'build'
assemble.dependsOn buildPlugin
// TODO: run tests as part of build task
build.dependsOn buildPlugin

void runAnt(Object buildfile, String... targets) {
    exec 'BUILD FAILED', ['ant', '-buildfile', buildfile, *targets] as Object[]
}

void exec(String textToFind, Object... args) {
    exec {
        commandLine = args
    }
}

void execAndFailIfTextFound(String textToFind, Object... args) {
  def taskOutput = new ByteArrayOutputStream()
  def teeOutput = new TeeOutputStream(taskOutput, System.out)
  exec {
      ignoreExitValue = true
      commandLine = args
      standardOutput = teeOutput
      errorOutput = teeOutput
  }
  String testOutput = taskOutput.toString()
  if (testOutput.contains(textToFind)) {
      throw new GradleException('ANT build failure')
  }
}
