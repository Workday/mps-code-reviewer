{ ->
  def downloadFile = mps.downloadDir + "/MPS-${mps.build}.zip"
  def eapSuffix = mps.build.contains("EAP") ? " EAP" : ""

  task downloadMps(type: Download) {
    doFirst {
      def downloadDir = file(mps.downloadDir)
      if (!downloadDir.exists()) {
          ant.mkdir(dir: downloadDir)
      }
    }
    src "http://download.jetbrains.com/mps/${mps.major}/MPS-${mps.build}.zip"
    dest downloadFile
    overwrite false
  }

  task unzipMps(type: Copy, dependsOn: downloadMps) {
    from zipTree(downloadFile)
    into mps.downloadDir + "/MPS"
    eachFile { FileCopyDetails fcp ->
		if (fcp.relativePath.pathString.startsWith("MPS ${mps.major}")) {
        	// remap the file to the root
			def segments = fcp.relativePath.segments
			def pathsegments =segments[1..-1] as String[]
			fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
		} else {
			fcp.exclude()
		}
    }
  }

  task getMps(dependsOn: unzipMps)
}()